using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml;

namespace EnvSettingsManager
{
    internal abstract class XmlExporterBase : ExporterBase
    {
        private const int SettingNameColumnIndex = 0;
        private const int DefaultValueColumnIndex = 1;

        private const int EnvironmentNameRowIndex = 1;
        private const int GenerateFileRowIndex = 2;
        private const int FilenameRowIndex = 3;
        private const int FirstValueRowIndex = 6;

        ExportActionArguments arguments;

        internal XmlExporterBase(ExportActionArguments args)
        {
            arguments = args;
        }

        internal override void ExportSettings(List<SettingsFile> settingsFiles, string outputPath)
        {
            if (!Directory.Exists(outputPath))
            {
                Directory.CreateDirectory(outputPath);
            }

            foreach (var file in settingsFiles)
            {
                var attribs = this.GetType().GetCustomAttributes(typeof(UseSingleOutputFileAttribute), true);
                bool useSingleOutputFile = attribs.Length > 0;
                ExportSettings(file, outputPath, Path.GetFileName(file.Filename), useSingleOutputFile, "EnvironmentSettings.wxi");
            }
        }

        protected virtual void ExportSettings(SettingsFile settingsFile, string outputPath, string inputFilename, bool useSingleOutputFile, string singleOutputFileName)
        {
            XmlWriterSettings xmls = new XmlWriterSettings();
            xmls.CloseOutput = true;
            xmls.Indent = true;
            xmls.OmitXmlDeclaration = false;

            XmlWriter xmlw = null;

            try
            {
                if (useSingleOutputFile)
                {
                    string outputFile = Path.Combine(outputPath, singleOutputFileName);
                    xmlw = XmlWriter.Create(outputFile, xmls);

                    RaiseInfo("Exporting to " + singleOutputFileName + "...");

                    WriteHeaderComment(inputFilename, xmlw);
                    WriteHeader(xmlw, null);
                }

                foreach (var iter in settingsFile.Environments.Skip(1))
                {
                    EnvironmentSettings environment = iter.Value;
                    bool generateFile = environment.GenerateFile;
                    string environmentName = environment.EnvironmentName;

                    // Skip this column if the user chose not to generate a file for it.
                    if (!generateFile)
                    {
                        RaiseVerbose("Skipping environment " + environmentName + " (disabled).");
                        continue;
                    }

                    if (useSingleOutputFile)
                    {
                        WriteSettings(settingsFile, environment, xmlw);
                    }
                    else
                    {
                        string outputFileName = environment.Filename;
                        string outputFile = Path.Combine(outputPath, outputFileName);

                        RaiseInfo("Exporting to " + outputFileName + "...");

                        using (xmlw = XmlWriter.Create(outputFile, xmls))
                        {
                            WriteHeaderComment(inputFilename, xmlw);

                            WriteHeader(xmlw, environmentName);

                            WriteSettings(settingsFile, environment, xmlw);

                            WriteFooter(xmlw, environmentName);
                        }
                    }
                }//for
                if (useSingleOutputFile)
                {
                    WriteFooter(xmlw, null);
                }
            }
            finally
            {
                if (xmlw != null)
                {
                    xmlw.Close();
                    xmlw = null;
                }
            }
        }


        protected virtual void WriteHeader(XmlWriter xmlw, string environmentName)
        {
        }

        protected abstract void WriteValue(
            XmlWriter xmlw, string settingName, string settingValue, string environmentName, bool valueContainsReservedXmlCharacter);

        protected virtual void WriteFooter(XmlWriter xmlw, string environmentName)
        {
        }


        private static void WriteHeaderComment(string inputFilename, XmlWriter xmlw)
        {
            xmlw.WriteComment(
                Environment.NewLine +
                "  This file was auto-generated by the Environment Settings Spreadsheet to XML Exporter (http://envsettingsmanager.codeplex.com)."
                + Environment.NewLine
                + Environment.NewLine
                + "  Input File: " + inputFilename
                + Environment.NewLine
                + "  Created: " + DateTime.Now.ToString("M/d/yyyy hh:mm tt")
                + Environment.NewLine);
        }

        private void WriteSettings(SettingsFile settingsFile, EnvironmentSettings environment, XmlWriter xmlw)
        {
            xmlw.WriteComment("Environment: " + environment.EnvironmentName);

            EnvironmentSettings defaults = settingsFile.Environments[SettingsFile.DefaultValueEnvironmentName];

            // Loop through the rows that contain settings and export each one to the XML file.
            foreach (var iter in settingsFile.Settings)
            {
                Setting setting = iter.Value;
                string settingName = setting.Name;
                var cell = environment.Settings[iter.Key];
                // Determine the setting value.
                string settingValue = cell != null
                    ? cell.Value
                    : defaults.Settings[iter.Key].Value;

                WriteValue(xmlw, settingName, settingValue, environment.EnvironmentName, HasReservedXmlCharacter(settingValue));
            }
        }

        protected virtual bool HasReservedXmlCharacter(string value)
        {
            return value.Contains("\"") || value.Contains("<") || value.Contains(">") || value.Contains("'") || value.Contains("&");
        }
    }
}
